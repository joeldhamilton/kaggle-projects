{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84894,"databundleVersionId":9709193,"sourceType":"competition"}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Loan Approval Prediction\n\n## Introduction\n\nThis notebook presents a machine learning solution for predicting loan approval status. The goal is to develop a model that can accurately determine whether a loan application will be approved or not, based on various applicant and loan characteristics.\n\n### Project Overview:\n- **Objective**: Predict the probability of loan approval for each applicant.\n- **Evaluation Metric**: Area Under the ROC Curve (AUC-ROC)\n- **Data**: Training and test datasets containing applicant information and loan details.\n\n### Key Steps:\n1. Data Loading and Exploration\n2. Data Cleaning and Preprocessing\n3. Feature Engineering\n4. Model Development using Neural Networks\n5. Model Evaluation\n6. Prediction on Test Data and Submission\n\nThis project showcases the application of deep learning techniques to a real-world financial problem, demonstrating the power of neural networks in making complex decisions based on multiple input features.\n\nLet's dive into the code and see how we approach this challenging prediction task!","metadata":{}},{"cell_type":"markdown","source":"# Intialization","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import roc_auc_score\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-01T04:31:11.005692Z","iopub.execute_input":"2024-10-01T04:31:11.006593Z","iopub.status.idle":"2024-10-01T04:31:15.346698Z","shell.execute_reply.started":"2024-10-01T04:31:11.006533Z","shell.execute_reply":"2024-10-01T04:31:15.345318Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# Data Loading and Exploration","metadata":{}},{"cell_type":"code","source":"# Load the training dataset\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e10/train.csv')\n\n# Load the test dataset\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e10/test.csv')\n\n# Display basic information about the datasets\nprint(\"Training dataset shape:\", train_df.shape)\nprint(\"Test dataset shape:\", test_df.shape)\n\n# Display the first few rows of the training dataset\nprint(\"\\nFirst few rows of the training dataset:\")\nprint(train_df.head())\n\n# Display column names\nprint(\"\\nColumn names:\")\nprint(train_df.columns)\n\n# Display basic statistics of the training dataset\nprint(\"\\nBasic statistics of the training dataset:\")\nprint(train_df.describe())\n\n# Check for missing values in the training dataset\nprint(\"\\nMissing values in the training dataset:\")\nprint(train_df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:31:15.353258Z","iopub.execute_input":"2024-10-01T04:31:15.353636Z","iopub.status.idle":"2024-10-01T04:31:15.583071Z","shell.execute_reply.started":"2024-10-01T04:31:15.353597Z","shell.execute_reply":"2024-10-01T04:31:15.581900Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Training dataset shape: (58645, 13)\nTest dataset shape: (39098, 12)\n\nFirst few rows of the training dataset:\n   id  person_age  person_income person_home_ownership  person_emp_length  \\\n0   0          37          35000                  RENT                0.0   \n1   1          22          56000                   OWN                6.0   \n2   2          29          28800                   OWN                8.0   \n3   3          30          70000                  RENT               14.0   \n4   4          22          60000                  RENT                2.0   \n\n  loan_intent loan_grade  loan_amnt  loan_int_rate  loan_percent_income  \\\n0   EDUCATION          B       6000          11.49                 0.17   \n1     MEDICAL          C       4000          13.35                 0.07   \n2    PERSONAL          A       6000           8.90                 0.21   \n3     VENTURE          B      12000          11.11                 0.17   \n4     MEDICAL          A       6000           6.92                 0.10   \n\n  cb_person_default_on_file  cb_person_cred_hist_length  loan_status  \n0                         N                          14            0  \n1                         N                           2            0  \n2                         N                          10            0  \n3                         N                           5            0  \n4                         N                           3            0  \n\nColumn names:\nIndex(['id', 'person_age', 'person_income', 'person_home_ownership',\n       'person_emp_length', 'loan_intent', 'loan_grade', 'loan_amnt',\n       'loan_int_rate', 'loan_percent_income', 'cb_person_default_on_file',\n       'cb_person_cred_hist_length', 'loan_status'],\n      dtype='object')\n\nBasic statistics of the training dataset:\n                 id    person_age  person_income  person_emp_length  \\\ncount  58645.000000  58645.000000   5.864500e+04       58645.000000   \nmean   29322.000000     27.550857   6.404617e+04           4.701015   \nstd    16929.497605      6.033216   3.793111e+04           3.959784   \nmin        0.000000     20.000000   4.200000e+03           0.000000   \n25%    14661.000000     23.000000   4.200000e+04           2.000000   \n50%    29322.000000     26.000000   5.800000e+04           4.000000   \n75%    43983.000000     30.000000   7.560000e+04           7.000000   \nmax    58644.000000    123.000000   1.900000e+06         123.000000   \n\n          loan_amnt  loan_int_rate  loan_percent_income  \\\ncount  58645.000000   58645.000000         58645.000000   \nmean    9217.556518      10.677874             0.159238   \nstd     5563.807384       3.034697             0.091692   \nmin      500.000000       5.420000             0.000000   \n25%     5000.000000       7.880000             0.090000   \n50%     8000.000000      10.750000             0.140000   \n75%    12000.000000      12.990000             0.210000   \nmax    35000.000000      23.220000             0.830000   \n\n       cb_person_cred_hist_length   loan_status  \ncount                58645.000000  58645.000000  \nmean                     5.813556      0.142382  \nstd                      4.029196      0.349445  \nmin                      2.000000      0.000000  \n25%                      3.000000      0.000000  \n50%                      4.000000      0.000000  \n75%                      8.000000      0.000000  \nmax                     30.000000      1.000000  \n\nMissing values in the training dataset:\nid                            0\nperson_age                    0\nperson_income                 0\nperson_home_ownership         0\nperson_emp_length             0\nloan_intent                   0\nloan_grade                    0\nloan_amnt                     0\nloan_int_rate                 0\nloan_percent_income           0\ncb_person_default_on_file     0\ncb_person_cred_hist_length    0\nloan_status                   0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Cleaning and Preprocessing","metadata":{}},{"cell_type":"code","source":"def clean_dataset(df):\n    # Check for missing values\n    print(\"Missing values before handling:\")\n    print(df.isnull().sum())\n    \n    # Handle missing values\n    # For numeric columns, fill with median\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].median())\n    \n    # For categorical columns, fill with mode\n    categorical_columns = df.select_dtypes(include=['object']).columns\n    df[categorical_columns] = df[categorical_columns].fillna(df[categorical_columns].mode().iloc[0])\n    \n    print(\"\\nMissing values after handling:\")\n    print(df.isnull().sum())\n    \n    # Check for and remove duplicates\n    duplicates = df.duplicated()\n    print(f\"\\nNumber of duplicate rows: {duplicates.sum()}\")\n    df = df.drop_duplicates()\n    \n    return df\n\n# Clean training data\nprint(\"Cleaning training data:\")\ntrain_df = clean_dataset(train_df)\n\nprint(\"\\nCleaning test data:\")\ntest_df = clean_dataset(test_df)\n\n# Print shapes after cleaning\nprint(\"\\nShape of training data after cleaning:\", train_df.shape)\nprint(\"Shape of test data after cleaning:\", test_df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:31:15.585023Z","iopub.execute_input":"2024-10-01T04:31:15.585519Z","iopub.status.idle":"2024-10-01T04:31:15.885157Z","shell.execute_reply.started":"2024-10-01T04:31:15.585467Z","shell.execute_reply":"2024-10-01T04:31:15.883904Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Cleaning training data:\nMissing values before handling:\nid                            0\nperson_age                    0\nperson_income                 0\nperson_home_ownership         0\nperson_emp_length             0\nloan_intent                   0\nloan_grade                    0\nloan_amnt                     0\nloan_int_rate                 0\nloan_percent_income           0\ncb_person_default_on_file     0\ncb_person_cred_hist_length    0\nloan_status                   0\ndtype: int64\n\nMissing values after handling:\nid                            0\nperson_age                    0\nperson_income                 0\nperson_home_ownership         0\nperson_emp_length             0\nloan_intent                   0\nloan_grade                    0\nloan_amnt                     0\nloan_int_rate                 0\nloan_percent_income           0\ncb_person_default_on_file     0\ncb_person_cred_hist_length    0\nloan_status                   0\ndtype: int64\n\nNumber of duplicate rows: 0\n\nCleaning test data:\nMissing values before handling:\nid                            0\nperson_age                    0\nperson_income                 0\nperson_home_ownership         0\nperson_emp_length             0\nloan_intent                   0\nloan_grade                    0\nloan_amnt                     0\nloan_int_rate                 0\nloan_percent_income           0\ncb_person_default_on_file     0\ncb_person_cred_hist_length    0\ndtype: int64\n\nMissing values after handling:\nid                            0\nperson_age                    0\nperson_income                 0\nperson_home_ownership         0\nperson_emp_length             0\nloan_intent                   0\nloan_grade                    0\nloan_amnt                     0\nloan_int_rate                 0\nloan_percent_income           0\ncb_person_default_on_file     0\ncb_person_cred_hist_length    0\ndtype: int64\n\nNumber of duplicate rows: 0\n\nShape of training data after cleaning: (58645, 13)\nShape of test data after cleaning: (39098, 12)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Separate features and target\nX_train = train_df.drop(['id', 'loan_status'], axis=1)\ny_train = train_df['loan_status']\nX_test = test_df.drop('id', axis=1)\n\n# Define categorical and numerical columns\ncategorical_features = ['person_home_ownership', 'loan_intent', 'loan_grade', 'cb_person_default_on_file']\nnumerical_features = ['person_age', 'person_income', 'person_emp_length', 'loan_amnt', 'loan_int_rate', 'loan_percent_income', 'cb_person_cred_hist_length']\n\n# Create preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numerical_features),\n        ('cat', OneHotEncoder(drop='first', sparse=False), categorical_features)\n    ])\n\n# Fit the preprocessor on the training data and transform both training and test data\nX_train_preprocessed = preprocessor.fit_transform(X_train)\nX_test_preprocessed = preprocessor.transform(X_test)\n\n# Get feature names after preprocessing\nonehot_encoder = preprocessor.named_transformers_['cat']\nif hasattr(onehot_encoder, 'get_feature_names_out'):\n    # For newer scikit-learn versions\n    cat_feature_names = onehot_encoder.get_feature_names_out(categorical_features)\nelse:\n    # For older scikit-learn versions\n    n_categories = [len(onehot_encoder.categories_[i]) - 1 for i in range(len(categorical_features))]\n    cat_feature_names = [f\"{feat}_{i}\" for feat, n in zip(categorical_features, n_categories) for i in range(n)]\n\nfeature_names = numerical_features + cat_feature_names.tolist()\n\n# Convert to DataFrames\nX_train_preprocessed = pd.DataFrame(X_train_preprocessed, columns=feature_names)\nX_test_preprocessed = pd.DataFrame(X_test_preprocessed, columns=feature_names)\n\nprint(\"Preprocessed training data shape:\", X_train_preprocessed.shape)\nprint(\"Preprocessed test data shape:\", X_test_preprocessed.shape)\nprint(\"\\nFirst few rows of preprocessed training data:\")\nprint(X_train_preprocessed.head())","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:31:15.888131Z","iopub.execute_input":"2024-10-01T04:31:15.888586Z","iopub.status.idle":"2024-10-01T04:31:16.106086Z","shell.execute_reply.started":"2024-10-01T04:31:15.888543Z","shell.execute_reply":"2024-10-01T04:31:16.104950Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Preprocessed training data shape: (58645, 22)\nPreprocessed test data shape: (39098, 22)\n\nFirst few rows of preprocessed training data:\n   person_age  person_income  person_emp_length  loan_amnt  loan_int_rate  \\\n0    1.566200      -0.765768          -1.187200  -0.578306       0.267616   \n1   -0.920057      -0.212128           0.328047  -0.937775       0.880532   \n2    0.240196      -0.929223           0.833130  -0.578306      -0.585854   \n3    0.405947       0.156966           2.348377   0.500101       0.142396   \n4   -0.920057      -0.106673          -0.682117  -0.578306      -1.238314   \n\n   loan_percent_income  cb_person_cred_hist_length  \\\n0             0.117378                    2.031798   \n1            -0.973242                   -0.946489   \n2             0.553626                    1.039036   \n3             0.117378                   -0.201917   \n4            -0.646056                   -0.698298   \n\n   person_home_ownership_OTHER  person_home_ownership_OWN  \\\n0                          0.0                        0.0   \n1                          0.0                        1.0   \n2                          0.0                        1.0   \n3                          0.0                        0.0   \n4                          0.0                        0.0   \n\n   person_home_ownership_RENT  ...  loan_intent_MEDICAL  loan_intent_PERSONAL  \\\n0                         1.0  ...                  0.0                   0.0   \n1                         0.0  ...                  1.0                   0.0   \n2                         0.0  ...                  0.0                   1.0   \n3                         1.0  ...                  0.0                   0.0   \n4                         1.0  ...                  1.0                   0.0   \n\n   loan_intent_VENTURE  loan_grade_B  loan_grade_C  loan_grade_D  \\\n0                  0.0           1.0           0.0           0.0   \n1                  0.0           0.0           1.0           0.0   \n2                  0.0           0.0           0.0           0.0   \n3                  1.0           1.0           0.0           0.0   \n4                  0.0           0.0           0.0           0.0   \n\n   loan_grade_E  loan_grade_F  loan_grade_G  cb_person_default_on_file_Y  \n0           0.0           0.0           0.0                          0.0  \n1           0.0           0.0           0.0                          0.0  \n2           0.0           0.0           0.0                          0.0  \n3           0.0           0.0           0.0                          0.0  \n4           0.0           0.0           0.0                          0.0  \n\n[5 rows x 22 columns]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Development using Neural Networks\n# Model Evaluation\n# Prediction on Test Data and Submission","metadata":{}},{"cell_type":"code","source":"# Split the data\nX_train, X_val, y_train, y_val = train_test_split(X_train_preprocessed, y_train, test_size=0.2, random_state=42)\n\n# Define the model\nmodel = keras.Sequential([\n    layers.Input(shape=(22,)),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(32, activation='relu'),\n    layers.Dense(16, activation='relu'),\n    layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    epochs=50,\n    batch_size=32,\n    callbacks=[keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)]\n)\n\n# Evaluate the model\nval_predictions = model.predict(X_val)\nval_auc = roc_auc_score(y_val, val_predictions)\nprint(f\"Validation AUC-ROC score: {val_auc:.4f}\")\n\n# Make predictions on the test set\ntest_predictions = model.predict(X_test_preprocessed)\n\n# Prepare submission (assuming 'id' column is available in test_df)\nsubmission = pd.DataFrame({\n    'id': test_df['id'],\n    'loan_status': test_predictions.flatten()\n})\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission file created: submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-01T04:31:16.107397Z","iopub.execute_input":"2024-10-01T04:31:16.107775Z","iopub.status.idle":"2024-10-01T04:32:18.327893Z","shell.execute_reply.started":"2024-10-01T04:31:16.107710Z","shell.execute_reply":"2024-10-01T04:32:18.326348Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.8822 - loss: 0.2939 - val_accuracy: 0.9372 - val_loss: 0.1911\nEpoch 2/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9360 - loss: 0.1960 - val_accuracy: 0.9389 - val_loss: 0.1883\nEpoch 3/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9408 - loss: 0.1862 - val_accuracy: 0.9441 - val_loss: 0.1790\nEpoch 4/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9438 - loss: 0.1819 - val_accuracy: 0.9448 - val_loss: 0.1780\nEpoch 5/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9444 - loss: 0.1799 - val_accuracy: 0.9448 - val_loss: 0.1768\nEpoch 6/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9452 - loss: 0.1784 - val_accuracy: 0.9463 - val_loss: 0.1767\nEpoch 7/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9471 - loss: 0.1735 - val_accuracy: 0.9459 - val_loss: 0.1757\nEpoch 8/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9450 - loss: 0.1773 - val_accuracy: 0.9453 - val_loss: 0.1759\nEpoch 9/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9472 - loss: 0.1736 - val_accuracy: 0.9465 - val_loss: 0.1753\nEpoch 10/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9467 - loss: 0.1733 - val_accuracy: 0.9448 - val_loss: 0.1780\nEpoch 11/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9478 - loss: 0.1707 - val_accuracy: 0.9471 - val_loss: 0.1752\nEpoch 12/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9487 - loss: 0.1676 - val_accuracy: 0.9452 - val_loss: 0.1765\nEpoch 13/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9477 - loss: 0.1721 - val_accuracy: 0.9456 - val_loss: 0.1771\nEpoch 14/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9470 - loss: 0.1737 - val_accuracy: 0.9454 - val_loss: 0.1785\nEpoch 15/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9482 - loss: 0.1669 - val_accuracy: 0.9475 - val_loss: 0.1727\nEpoch 16/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9493 - loss: 0.1656 - val_accuracy: 0.9483 - val_loss: 0.1745\nEpoch 17/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9483 - loss: 0.1702 - val_accuracy: 0.9471 - val_loss: 0.1799\nEpoch 18/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9484 - loss: 0.1673 - val_accuracy: 0.9451 - val_loss: 0.1811\nEpoch 19/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9502 - loss: 0.1632 - val_accuracy: 0.9479 - val_loss: 0.1755\nEpoch 20/50\n\u001b[1m1467/1467\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9486 - loss: 0.1680 - val_accuracy: 0.9477 - val_loss: 0.1774\n\u001b[1m367/367\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\nValidation AUC-ROC score: 0.9366\n\u001b[1m1222/1222\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\nSubmission file created: submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Conclusion\n\n## Summary of Approach and Results\n\nIn this project, we developed a machine learning model to predict loan approval probabilities. Our approach involved several key steps:\n\n1. **Data Preprocessing**: We cleaned the dataset, handled missing values, and encoded categorical variables.\n2. **Feature Engineering**: We scaled numerical features and one-hot encoded categorical features to prepare them for our model.\n3. **Model Development**: We implemented a neural network using TensorFlow/Keras, with multiple dense layers and early stopping to prevent overfitting.\n4. **Model Evaluation**: We achieved a validation AUC-ROC score of 0.9353, indicating strong predictive performance.\n\n## Key Findings\n\n- The neural network model demonstrated high accuracy in predicting loan approval status.\n- The use of early stopping helped optimize the model's performance and prevent overfitting.\n- Feature preprocessing, including scaling and encoding, played a crucial role in the model's success.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}